{"version":3,"file":"component---src-pages-jobs-js-25caf0cc705f339c5570.js","mappings":"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","sources":["webpack://nwa-daily/./src/components/jobs.js","webpack://nwa-daily/./src/pages/jobs.js"],"sourcesContent":["import React from \"react\";\nimport Card from \"./card\";\nimport { Link } from \"gatsby\";\nimport \"../assets/css/main.css\";\nimport { useBreakpoint } from 'gatsby-plugin-breakpoints';\n\nconst Jobs = ({ jobs }) => {\n  const breakpoints = useBreakpoint()\n  console.log(jobs)\n\n  return (\n    \n    <div>\n   \n   {breakpoints.sm ? \n    (\n      \n      <ul className=\"uk-list uk-list-divider uk-width-8-8\">\n           {jobs.map((job, i) => {\n            let dt = new Date(job.node.posted_date)\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n          ];\n          let dateLimit = new Date() - 62*60*60*24*1000;\n          console.log(dateLimit)\n          if (job.node.type === 'Featured' && dt >= dateLimit) {\n            return (\n              // <Card\n              //   article={article}\n              //   key={`article__left__${article.node.slug}`}\n              // />\n              <li className=\"mobile-job\" style={{backgroundColor:\"#FFFFE0\"}} key={`job__left__${job.node.slug}`}>\n                \n                \n                   <a\n                      className=\"job-mobile\"\n                      // href={'/jobs/'+job.node.slug}\n                      href={job.node.applicationLink}\n                      \n                      // state={{ postId: post.id }}\n                      >\n                       \n                        \n                        <span className=\"company-mobile\">{job.node.organization}</span>\n                        <br></br>\n                        <div className=\"job-middle-section\">\n                        <img width=\"35\" height=\"35\" src={job.node.logoUrl}/>\n                        <span className=\"title-mobile\">{job.node.title}</span>\n                        <span className=\"date-mobile\">Featured</span>\n                        </div>\n                        <br></br>\n                        <span className=\"location-company-mobile\">{job.node.location}</span>\n                        \n                        \n                        </a>\n                      \n                  \n                  \n              </li>\n            );\n          }\n          })\n          \n        }\n\n        {jobs.map((job, i) => {\n            let dt = new Date(job.node.posted_date)\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n          ];\n          let dateLimit = new Date() - 62*60*60*24*1000;\n          console.log(dateLimit)\n        if (job.node.type !== 'Featured' && dt >= dateLimit) {\n            \n            return (\n              // <Card\n              //   article={article}\n              //   key={`article__left__${article.node.slug}`}\n              // />\n              <li className=\"mobile-job\" key={`job__left__${job.node.slug}`}>\n                \n                \n                   <a\n                      className=\"job-mobile\"\n                      // href={'/jobs/'+job.node.slug}\n                      href={job.node.applicationLink}\n                      // state={{ postId: post.id }}\n                      // state={{ postId: post.id }}\n                      >\n                       \n                        \n                        <span className=\"company-mobile\">{job.node.organization}</span>\n                        <br></br>\n                        <div className=\"job-middle-section\">\n                        <img width=\"35\" height=\"35\" src={job.node.logoUrl}/>\n                        <span className=\"title-mobile\">{job.node.title}</span>\n                        <span className=\"date-mobile\">{\"Posted \" + monthNames[dt.getMonth()] + ' '+ dt.getDate()}</span>\n                        </div>\n                        <br></br>\n                        <span className=\"location-company-mobile\">{job.node.location}</span>\n                        \n                        \n                        </a>\n                      \n                  \n                  \n              </li>\n            );\n          \n        }\n      })\n          \n    }\n      \n      </ul>\n    )\n    :\n    (\n      \n        <ul className=\"uk-list uk-list-divider uk-width-8-8\">\n          {jobs.map((job, i) => {\n            let dt = new Date(job.node.posted_date)\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n          ];\n          let dateLimit = new Date() - 62*60*60*24*1000;\n          console.log(dateLimit)\n          if (job.node.type === 'Featured' && dt >= dateLimit) {\n            return (\n              // <Card\n              //   article={article}\n              //   key={`article__left__${article.node.slug}`}\n              // />\n              <li className=\"job\" style={{backgroundColor:\"#FFFFE0\"}} key={`job__left__${job.node.slug}`}>\n                \n                \n                   <a\n                      className=\"job\"\n                      // href={'/jobs/'+job.node.slug}\n                      href={job.node.applicationLink}\n                      // state={{ postId: post.id }}\n                      >\n                       \n                        \n                        <span className=\"company\">{job.node.organization}</span>\n                        <br></br>\n                        <div className=\"job-middle-section\">\n                        <img width=\"35\" height=\"35\" src={job.node.logoUrl}/>\n                        <span className=\"title\">{job.node.title}</span>\n                        <span className=\"date\">Featured</span>\n                        </div>\n                        <br></br>\n                        <span className=\"location company\">{job.node.location}</span>\n                        \n                        \n                        </a>\n                      \n                  \n                  \n              </li>\n            );\n          }\n          })\n          \n        }\n\n        {jobs.map((job, i) => {\n            let dt = new Date(job.node.posted_date)\n            const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n          ];\n          let dateLimit = new Date() - 62*60*60*24*1000;\n          console.log(dateLimit)\n        if (job.node.type !== 'Featured' && dt >= dateLimit) {\n            \n            return (\n              // <Card\n              //   article={article}\n              //   key={`article__left__${article.node.slug}`}\n              // />\n              <li className=\"job\" key={`job__left__${job.node.slug}`}>\n                \n                \n                   <a\n                      className=\"job\"\n                      // href={'/jobs/'+job.node.slug}\n                      href={job.node.applicationLink}\n                      // state={{ postId: post.id }}\n                      >\n                       \n                        \n                        <span className=\"company\">{job.node.organization}</span>\n                        <br></br>\n                        <div className=\"job-middle-section\">\n                        <img width=\"35\" height=\"35\" src={job.node.logoUrl}/>\n                        <span className=\"title\">{job.node.title}</span>\n                        <span className=\"date\">{\"Posted \" + monthNames[dt.getMonth()] + ' '+ dt.getDate()}</span>\n                        </div>\n                        <br></br>\n                        <span className=\"location company\">{job.node.location}</span>\n                        \n                        \n                        </a>\n                      \n                  \n                  \n              </li>\n            );\n          \n        }\n      })\n          \n    }\n        \n          </ul>\n    )}\n     \n     \n    </div>\n  );\n};\n\nexport default Jobs;","import React from \"react\";\nimport { Link, graphql, useStaticQuery, StaticQuery } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport JobsComponent from \"../components/jobs\";\nimport \"../assets/css/main.css\";\nimport { useBreakpoint } from 'gatsby-plugin-breakpoints';\nimport { withBreakpoints } from 'gatsby-plugin-breakpoints';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from '@material-ui/core/IconButton';\nimport Close from \"@material-ui/icons/Close\";\n\nconst email = \"\"\n\nclass JobsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.emailRef = React.createRef();\n    this.state = {\n      email: \"\",\n      location: \"landing regular\",\n      isModalOpen: false,\n      submitError: false,\n      isSubmitted: false,\n      isAdSubmitted: false,\n      advertiser: \"\",\n      emails: 22000,\n      oneLiner: \"0\",\n      extendedText: \"0\",\n      sponsor: \"0\",\n      date: new Date()\n    }\n  }\n\n  componentDidMount = () => {\n\t\t// Set delay in milliseconds\n\t\twindow.setTimeout(() =>{this.setState({ isModalOpen: true })}, 2000);\n    fetch(`https://nwadailybackend.herokuapp.com/emails/count`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(res => {\n          if (res.status !== 200 && res.status !== 201) {\n            throw new Error('Failed!');\n          }\n          return res.json();\n        })\n        .then(resData => {\n          console.log(resData)\n          this.setState({ emails: resData })\n        })\n        .catch(err => {\n          console.log(err);\n        });\n\n\t}  \n\n  handleInputChange = event => {\n    console.log('test')\n    const target = event.target\n    const value = target.value\n    const name = target.name\n    console.log(name)\n    this.setState({\n      [name]: value,\n    })\n    console.log(this.state.email)\n  }\n\n  handleAdInputChange = event => {\n    console.log('test')\n    const target = event.target\n    const value = target.value\n    const name = target.name\n    console.log(name)\n    this.setState({\n      [name]: value,\n    })\n    console.log(this.state.advertiser)\n  }\n\n  handleModalClose = event => {\n    // console.log('handleModalOpen: ', event);\n    this.setState({ isModalOpen: false })\n  }\n\n  submitAdHandler = (e) => {\n    e.preventDefault();\n    \n    \n    if (this.state.advertiser !== \"\") {\n    \n    const advertiser = this.state.advertiser.toLowerCase()\n    const oneLiner = this.state.oneLiner\n    const extendedText = this.state.extendedText\n    const sponsor = this.state.sponsor\n    const requestBody = {\n        email: advertiser,\n        oneLiner: oneLiner,\n        event: extendedText,\n        sponsor: sponsor,\n        property: \"NWA Daily\"\n        // location: \"advertise\",\n        // source: \"regular\",\n      }\n  \n    fetch(`https://nwadailybackend.herokuapp.com/inquiries`, {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData.data)\n        this.setState({\n          isAdSubmitted: true\n        })\n        \n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n  else {\n    this.setState({\n      submitError: true,\n    })\n    console.log(true)\n  }\n  \n  }\n\n  submitHandler = (e) => {\n    e.preventDefault();\n    \n    let postId = null\n    console.log(window.location.href.split('?id=').length)\n    if (window.location.href.split('?id=').length > 1) {\n      console.log('idhere')\n      console.log(window.location.href)\n      postId = window.location.href.split('?id=')[1]\n      postId = postId.split('&')[0]\n      console.log(postId)\n      }\n    else {\n        postId = 'jobs'\n        console.log(postId)\n      }\n    if (this.state.email !== \"\") {\n    \n    const email = this.state.email.toLowerCase()\n    const location = this.state.location\n    const requestBody = {\n        email: email,\n        location: location,\n        source: postId,\n        subscribeDate: this.state.date,\n        property: \"NWA Daily\"\n      }\n  \n    fetch(`https://nwadailybackend.herokuapp.com/signup`, {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Failed!');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData.data)\n        this.setState({\n          isModalOpen: false,\n          isSubmitted: true\n        })\n        \n      })\n      .catch(err => {\n        console.log(err);\n      });\n    //   fetch(`https://nwadailybackend.herokuapp.com/signup`, {\n    //   method: 'POST',\n    //   body: JSON.stringify({email: email}),\n    //   headers: {\n    //     'Content-Type': 'application/json'\n    //   },\n    //   mode: 'cors'\n    // })\n    //   .then(res => {\n    //     if (res.status !== 200 && res.status !== 201) {\n    //       console.log(res.status)\n    //       return res.status\n    //     }\n    //     return res;\n    //   })\n    //   .catch(err => {\n    //     console.log(err);\n    //   });\n  }\n  else {\n    this.setState({\n      submitError: true,\n    })\n    console.log(true)\n  }\n  \n  }\nrender() {\n  const { breakpoints } = this.props;\n  console.log(breakpoints)\n  \n  return (\n    \n    <StaticQuery\n                              query={graphql`\n                              query {\n                                strapiHomepage {\n                                  hero {\n                                    title\n                                  }\n                                  seo {\n                                    metaTitle\n                                    metaDescription\n                                    shareImage {\n                                      publicURL\n                                    }\n                                  }\n                                }\n                                allStrapiJob(sort: {order: DESC, fields: posted_date}) {\n                                  edges {\n                                    node {\n                                      strapiId\n                                      slug\n                                      published_at\n                                      description\n                                      title\n                                      type\n                                      posted_date\n                                      applicationLink\n                                      logoUrl\n                                      logo {\n                                        publicURL\n                                      }\n                                      location\n                                      organization\n                                    }\n                                  }\n                                }\n                              }\n                              `}\n                              render={data => (\n                                <Layout seo={data.strapiHomepage.seo}>\n\n{/* const JobsPage = () => {\n  const data = useStaticQuery(query);\n  const breakpoints = useBreakpoint()\n  \n  const seo = {\n    metaTitle: \"NWA Daily Job Board\",\n    metaDescription: \"Find cool jobs in Northwest Arkansas from small businesses, startups, and corporations in Bentonville, Fayetteville, Springdale, Rogers, and more\",\n    shareImage: data.strapiHomepage.seo.shareImage,\n  };\n  return (\n    <Layout seo={seo}> */}\n<Dialog\n        open={this.state.isModalOpen}\n        keepMounted\n        onClose={() => this.handleModalClose()}\n        aria-labelledby=\"modal-slide-title\"\n        aria-describedby=\"modal-slide-description\"\n      >\n        <DialogTitle\n          id=\"classic-modal-slide-title\"\n          disableTypography\n        >\n          <IconButton\n            key=\"close\"\n            aria-label=\"Close\"\n            color=\"inherit\"\n            onClick={() => this.handleModalClose()}\n          >\n            <Close />\n          </IconButton>\n          <h3 style={{fontWeight:\"bold\"}}>{`Join ${this.state.emails.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} NWA locals and subscribe to the free daily newsletter`}</h3>\n        </DialogTitle>\n        <DialogContent\n          id=\"modal-slide-description\"\n        >\n          {breakpoints.sm ? \n            (\n            <form>\n            \n            {this.state.isSubmitted === false ?\n                (\n                  \n                  <div class=\"uk-margin\" style={{width:\"90%\",marginLeft:\"auto\",marginRight:\"auto\"}}>\n            <input \n              style={{width:\"100%\",color:\"#307765\",marginLeft:\"auto\",marginRight:\"auto\", marginBottom:\"0px\",paddingBottom:\"0px\"}} \n              className=\"uk-input\" \n              id=\"signup\"\n              name=\"email\" \n              type=\"text\" \n              placeholder=\"Email address\"\n              labelText=\"Your Email\"\n              value={this.state.email}\n                onChange={(e) => {\n                  console.log(e.target.value)\n                  this.setState({email:e.target.value,\n                                  location:\"landing pop up\"})\n              }}\n              />\n              <br></br>\n              <br></br>\n            <button \n              style={{width:\"100%\",marginLeft:\"auto\",marginRight:\"auto\",backgroundColor:\"#307765\",opacity:1,color:\"white\"}} \n              className=\"uk-button uk-button-default\"\n              onClick={this.submitHandler}\n              >Subscribe</button>\n              </div>\n                )\n                :\n                (\n                  <div class=\"uk-margin\">\n            <h4 style={{textAlign:\"center\"}}>Look for us in your inbox!</h4>\n              </div>\n                )}\n             \n            </form>\n            )\n            :\n            (\n              <form>\n            \n            {this.state.isSubmitted === false ?\n                (\n                  \n                  <div class=\"uk-margin\" style={{width:\"90%\",marginLeft:\"auto\",marginRight:\"auto\"}}>\n            <input \n              style={{width:\"70%\",color:\"#307765\",marginLeft:\"auto\",marginRight:\"auto\", marginBottom:\"0px\",paddingBottom:\"0px\"}} \n              className=\"uk-input\" \n              id=\"signup\"\n              name=\"email\" \n              type=\"text\" \n              placeholder=\"Email address\"\n              labelText=\"Your Email\"\n              value={this.state.email}\n                onChange={(e) => {\n                  console.log(e.target.value)\n                  this.setState({email:e.target.value})\n              }}\n              />\n            <button \n              style={{backgroundColor:\"#307765\",opacity:1,color:\"white\"}} \n              className=\"uk-button uk-button-default\"\n              onClick={this.submitHandler}\n              >Subscribe</button>\n              </div>\n                )\n                :\n                (\n                  <div class=\"uk-margin\">\n            <h4 style={{textAlign:\"center\"}}>Look for us in your inbox!</h4>\n              </div>\n                )}\n             \n            </form>\n            )}\n            </DialogContent>\n      </Dialog>\n      <div className=\"job-head\">\n      <h2 className=\"job-header\">Browse cool jobs in NWA</h2>\n      <a href=\"/jobpost\">\n      <button className=\"job-post-button\"\n              >Post a job</button>\n      </a>\n      </div>\n\n{data.allStrapiJob.edges.length > 0 ?\n(breakpoints.sm ? \n(\n<div className=\"uk-section\">\n      {/* <h1 className=\"uk-text-center\">{data.strapiHomepage.hero.title}</h1> */}\n        <div className=\"uk-container uk-container-large\" >\n\n          <JobsComponent jobs={data.allStrapiJob.edges} />\n        \n        </div>\n      </div>\n)\n:\n(\n<div className=\"uk-section\">\n      {/* <h1 className=\"uk-text-center\">{data.strapiHomepage.hero.title}</h1> */}\n        <div className=\"uk-container uk-container-large\" >\n        \n          <JobsComponent jobs={data.allStrapiJob.edges} />\n        \n        </div>\n      </div>\n)\n) \n:\n(\n<div className=\"uk-section\">\n      {/* <h1 className=\"uk-text-center\">{data.strapiHomepage.hero.title}</h1> */}\n        <div className=\"uk-container uk-container-large uk-text-center\" >\n\n          <p>There are no jobs posted at this time</p>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n        \n        </div>\n      </div>\n)}\n\n</Layout>\n    )}\n    />     \n  );\n};\n}\n\n\nexport default withBreakpoints(JobsPage);"],"names":["jobs","breakpoints","useBreakpoint","console","log","sm","className","map","job","i","dt","Date","node","posted_date","dateLimit","type","style","backgroundColor","key","slug","href","applicationLink","organization","width","height","src","logoUrl","title","location","getMonth","getDate","JobsPage","props","componentDidMount","window","setTimeout","setState","isModalOpen","fetch","method","headers","then","res","status","Error","json","resData","emails","catch","err","handleInputChange","event","target","value","name","state","email","handleAdInputChange","advertiser","handleModalClose","submitAdHandler","e","preventDefault","requestBody","toLowerCase","oneLiner","extendedText","sponsor","property","body","JSON","stringify","data","isAdSubmitted","submitError","submitHandler","postId","split","length","source","subscribeDate","date","isSubmitted","emailRef","React","render","this","StaticQuery","query","seo","strapiHomepage","Dialog","open","keepMounted","onClose","DialogTitle","id","disableTypography","IconButton","color","onClick","Close","fontWeight","toString","replace","DialogContent","class","marginLeft","marginRight","marginBottom","paddingBottom","placeholder","labelText","onChange","opacity","textAlign","allStrapiJob","edges","withBreakpoints"],"sourceRoot":""}